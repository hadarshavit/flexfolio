inst_clst_ft_type	: 1
svd_type	: 1
dim_rd_type	: 0
clst_method	: 2
ft_selection_method	: 6
svd_dim	: 10
svd_outlier_threshold	: 20
ft_outlier_threshold	: 0
to_report	: True
to_plot	: True
alg_subset_selection	: True
inst_subset_selection	: False
ft_subset_selection	: True
ft_postprocessing	: False
Started solving  /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU
% Command line arguments:
% --aslib-dir /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU --model-dir MODEL_DIR --print-times /home/misir/Desktop/liclipse/Workspace/flexfolio-data_filtering-v3/output/14082015162432194228/SAT11-INDU.csv
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/description.txt
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/algorithm_runs.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_values.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_runstatus.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/ground_truth.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_costs.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/cv.arff
% 1-th repetition: 30,30,30,30,30,30,30,30,30,30 distribution
% Used Feature Steps: Pre,Basic,KLB,CG
% Used features: CG_mean,BINARYp,reducedVars,VG_mean,VCG_VAR_mean,VG_min,VCG_VAR_coeff_variation,nvarsOrig,CG_coeff_variation,VG_max,CG_max,POSNEG_RATIO_CLAUSE_max,horn_clauses_fraction,nclauses,vars_clauses_ratio,CG_entropy,UNARY,cluster_coeff_mean,VCG_CLAUSE_coeff_variation,POSNEG_RATIO_VAR_max,VCG_VAR_max,POSNEG_RATIO_VAR_entropy,TRINARYp,POSNEG_RATIO_VAR_min,HORNY_VAR_max,VCG_CLAUSE_mean,VCG_CLAUSE_min,cluster_coeff_entropy,POSNEG_RATIO_CLAUSE_min,HORNY_VAR_coeff_variation,VCG_VAR_min,nvars,nclausesOrig,POSNEG_RATIO_CLAUSE_mean,CG_min,VG_coeff_variation,POSNEG_RATIO_VAR_mean,cluster_coeff_coeff_variation,POSNEG_RATIO_CLAUSE_coeff_variation,VCG_CLAUSE_entropy,VCG_VAR_entropy,cluster_coeff_min,POSNEG_RATIO_VAR_stdev,HORNY_VAR_entropy,cluster_coeff_max,HORNY_VAR_mean,VCG_CLAUSE_max,HORNY_VAR_min,POSNEG_RATIO_CLAUSE_entropy,reducedClauses
% 
% Check Consistency and Completeness of input data
% Instances: 		 300
% Algorithms: 		 18
% Incomplete Feature Vector: 	 0 (maybe imputed)
% Unsolvable Instances (status): 	 47
% Unsolvable Instances (runtime): 	 47
% Valid Instances: 	 253
% Presolved: 		 10
% Average Feature Costs: 	 135.3471
% Use given CV of 1-th repetition
% >>> 1-th iteration<<<
('sr: ', array([ 857.25622129,  188.00595792,  131.67902384,  122.30453603,
         88.70831998,   82.47457296,   74.80107242]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	227.0 	440.095468612
2 	221.0 	1850.0612113
3 	215.0 	3227.67470653
4 	207.0 	4962.9606023
5 	199.0 	6637.28029543
6 	195.0 	7519.00225407
7 	194.0 	7823.06289227
8 	189.0 	8924.65658115
9 	186.0 	9616.08672895
10 	180.0 	10934.1071823
11 	170.0 	13010.3370838
12 	167.0 	13685.8019246
13 	159.0 	15393.327808
14 	152.0 	16916.4506755
15 	145.0 	18398.5771997
16 	142.0 	19091.6663208
17 	132.0 	21208.8934698
18 	115.0 	24940.3087424
('top_ft_inx_arr: ', array([ 3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31,
       33, 35, 37, 39, 41, 44, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [-0.07542562  0.15009641  0.09931983  0.16247156  0.13549978  0.29676846
  0.24837645  0.29851872  0.20184911  0.14035569]
top_ft_inx_arr:  [ 3  4  5  7  8 11 13 15 16 18 19 21 24 25 26 29 31 33 35 37 39 41 44 46 47]
(25 out of 50) Features to keep are determined: 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31, 33, 35, 37, 39, 41, 44, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  227  - par10 =  440.095468612
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.42626457  0.42626457  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.          0.59420529  0.59420529  0.        ] ,  b
plt.plot(xs, ys,  color) =  [ 55.  55.  65.  65.] ,  [ 0.          0.36986845  0.36986845  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 75.  75.  85.  85.] ,  [ 0.          0.09251072  0.09251072  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  95.   95.  105.  105.] ,  [ 0.          0.27653832  0.27653832  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  80.   80.  100.  100.] ,  [ 0.09251072  0.40236838  0.40236838  0.27653832] ,  r
plt.plot(xs, ys,  color) =  [ 60.  60.  90.  90.] ,  [ 0.36986845  0.46777083  0.46777083  0.40236838] ,  r
plt.plot(xs, ys,  color) =  [ 45.  45.  75.  75.] ,  [ 0.          0.53558046  0.53558046  0.46777083] ,  b
plt.plot(xs, ys,  color) =  [ 145.  145.  155.  155.] ,  [ 0.          0.40607863  0.40607863  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 135.  135.  150.  150.] ,  [ 0.          0.42635385  0.42635385  0.40607863] ,  c
plt.plot(xs, ys,  color) =  [ 125.   125.   142.5  142.5] ,  [ 0.          0.48355916  0.48355916  0.42635385] ,  c
plt.plot(xs, ys,  color) =  [ 115.    115.    133.75  133.75] ,  [ 0.          0.54069023  0.54069023  0.48355916] ,  b
plt.plot(xs, ys,  color) =  [  60.      60.     124.375  124.375] ,  [ 0.53558046  0.59516304  0.59516304  0.54069023] ,  b
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.65534406  0.65534406  0.        ] ,  b
plt.plot(xs, ys,  color) =  [  92.1875   92.1875  170.      170.    ] ,  [ 0.59516304  0.65886618  0.65886618  0.65534406] ,  b
plt.plot(xs, ys,  color) =  [  30.        30.       131.09375  131.09375] ,  [ 0.59420529  0.66662584  0.66662584  0.65886618] ,  b
plt.plot(xs, ys,  color) =  [ 10.        10.        80.546875  80.546875] ,  [ 0.42626457  0.69158047  0.69158047  0.66662584] ,  b
leaves:  [ 4  7  1 12  8  5 10  3 11  9 15 13  6 14  2 16  0 17]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3246.13754085
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  3252.69881818
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3262.91451589
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3280.20508453
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3286.72645085
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3294.37344411
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
Oracle performance after algorithm subset selection: num_inst_solved =  227  - par10 =  482.016805176
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
