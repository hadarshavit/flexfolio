inst_clst_ft_type	: 1
svd_type	: 1
dim_rd_type	: 0
clst_method	: 2
ft_selection_method	: 6
svd_dim	: 10
svd_outlier_threshold	: 20
ft_outlier_threshold	: 0
to_report	: True
to_plot	: True
alg_subset_selection	: True
inst_subset_selection	: False
ft_subset_selection	: True
ft_postprocessing	: False
Started solving  /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU
% Command line arguments:
% --aslib-dir /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU --model-dir MODEL_DIR --print-times /home/misir/Desktop/liclipse/Workspace/flexfolio-data_filtering-v3/output/06082015163033752447/SAT11-INDU.csv
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/description.txt
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/algorithm_runs.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_values.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_runstatus.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/ground_truth.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/feature_costs.arff
% Read /home/misir/Desktop/aslib_data-aslib-v1.1/SAT11-INDU/cv.arff
% 1-th repetition: 30,30,30,30,30,30,30,30,30,30 distribution
% Used Feature Steps: Pre,Basic,KLB,CG
% Used features: CG_mean,BINARYp,reducedVars,VG_mean,VCG_VAR_mean,VG_min,VCG_VAR_coeff_variation,nvarsOrig,CG_coeff_variation,VG_max,CG_max,POSNEG_RATIO_CLAUSE_max,horn_clauses_fraction,nclauses,vars_clauses_ratio,CG_entropy,UNARY,cluster_coeff_mean,VCG_CLAUSE_coeff_variation,POSNEG_RATIO_VAR_max,VCG_VAR_max,POSNEG_RATIO_VAR_entropy,TRINARYp,POSNEG_RATIO_VAR_min,HORNY_VAR_max,VCG_CLAUSE_mean,VCG_CLAUSE_min,cluster_coeff_entropy,POSNEG_RATIO_CLAUSE_min,HORNY_VAR_coeff_variation,VCG_VAR_min,nvars,nclausesOrig,POSNEG_RATIO_CLAUSE_mean,CG_min,VG_coeff_variation,POSNEG_RATIO_VAR_mean,cluster_coeff_coeff_variation,POSNEG_RATIO_CLAUSE_coeff_variation,VCG_CLAUSE_entropy,VCG_VAR_entropy,cluster_coeff_min,POSNEG_RATIO_VAR_stdev,HORNY_VAR_entropy,cluster_coeff_max,HORNY_VAR_mean,VCG_CLAUSE_max,HORNY_VAR_min,POSNEG_RATIO_CLAUSE_entropy,reducedClauses
% 
% Check Consistency and Completeness of input data
% Instances: 		 300
% Algorithms: 		 18
% Incomplete Feature Vector: 	 0 (maybe imputed)
% Unsolvable Instances (status): 	 47
% Unsolvable Instances (runtime): 	 47
% Valid Instances: 	 253
% Presolved: 		 10
% Average Feature Costs: 	 135.3471
% Use given CV of 1-th repetition
% >>> 1-th iteration<<<
('sr: ', array([ 857.25622129,  188.00595792,  131.67902384,  122.30453603,
         88.70831998,   82.47457296,   74.80107242]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	227.0 	440.095468612
2 	221.0 	1850.0612113
3 	215.0 	3227.67470653
4 	207.0 	4962.9606023
5 	199.0 	6637.28029543
6 	195.0 	7519.00225407
7 	194.0 	7823.06289227
8 	189.0 	8924.65658115
9 	186.0 	9616.08672895
10 	180.0 	10934.1071823
11 	170.0 	13010.3370838
12 	167.0 	13685.8019246
13 	159.0 	15393.327808
14 	152.0 	16916.4506755
15 	145.0 	18398.5771997
16 	142.0 	19091.6663208
17 	132.0 	21208.8934698
18 	115.0 	24940.3087424
('top_ft_inx_arr: ', array([ 3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31,
       33, 35, 37, 39, 41, 44, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [-0.07542562  0.15009641  0.09931983  0.16247156  0.13549978  0.29676846
  0.24837645  0.29851872  0.20184911  0.14035569]
top_ft_inx_arr:  [ 3  4  5  7  8 11 13 15 16 18 19 21 24 25 26 29 31 33 35 37 39 41 44 46 47]
(25 out of 50) Features to keep are determined: 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31, 33, 35, 37, 39, 41, 44, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  227  - par10 =  440.095468612
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.42626457  0.42626457  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.          0.59420529  0.59420529  0.        ] ,  b
plt.plot(xs, ys,  color) =  [ 55.  55.  65.  65.] ,  [ 0.          0.36986845  0.36986845  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 75.  75.  85.  85.] ,  [ 0.          0.09251072  0.09251072  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  95.   95.  105.  105.] ,  [ 0.          0.27653832  0.27653832  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  80.   80.  100.  100.] ,  [ 0.09251072  0.40236838  0.40236838  0.27653832] ,  r
plt.plot(xs, ys,  color) =  [ 60.  60.  90.  90.] ,  [ 0.36986845  0.46777083  0.46777083  0.40236838] ,  r
plt.plot(xs, ys,  color) =  [ 45.  45.  75.  75.] ,  [ 0.          0.53558046  0.53558046  0.46777083] ,  b
plt.plot(xs, ys,  color) =  [ 145.  145.  155.  155.] ,  [ 0.          0.40607863  0.40607863  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 135.  135.  150.  150.] ,  [ 0.          0.42635385  0.42635385  0.40607863] ,  c
plt.plot(xs, ys,  color) =  [ 125.   125.   142.5  142.5] ,  [ 0.          0.48355916  0.48355916  0.42635385] ,  c
plt.plot(xs, ys,  color) =  [ 115.    115.    133.75  133.75] ,  [ 0.          0.54069023  0.54069023  0.48355916] ,  b
plt.plot(xs, ys,  color) =  [  60.      60.     124.375  124.375] ,  [ 0.53558046  0.59516304  0.59516304  0.54069023] ,  b
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.65534406  0.65534406  0.        ] ,  b
plt.plot(xs, ys,  color) =  [  92.1875   92.1875  170.      170.    ] ,  [ 0.59516304  0.65886618  0.65886618  0.65534406] ,  b
plt.plot(xs, ys,  color) =  [  30.        30.       131.09375  131.09375] ,  [ 0.59420529  0.66662584  0.66662584  0.65886618] ,  b
plt.plot(xs, ys,  color) =  [ 10.        10.        80.546875  80.546875] ,  [ 0.42626457  0.69158047  0.69158047  0.66662584] ,  b
leaves:  [ 4  7  1 12  8  5 10  3 11  9 15 13  6 14  2 16  0 17]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3246.13754085
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  3252.69881818
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3262.91451589
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3280.20508453
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3286.72645085
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3294.37344411
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
Oracle performance after algorithm subset selection: num_inst_solved =  227  - par10 =  482.016805176
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 8879.79 (30 instances)
% >>> 2-th iteration<<<
('sr: ', array([ 846.03913564,  187.95453961,  130.52700451,  122.9867759 ,
         90.59222728,   84.26801222,   74.93453758]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	230.0 	413.407921787
2 	224.0 	1804.92054803
3 	218.0 	3161.58585475
4 	211.0 	4665.4560701
5 	204.0 	6116.46388557
6 	202.0 	6584.89992178
7 	200.0 	7095.07162241
8 	195.0 	8182.16231533
9 	192.0 	8864.22707863
10 	185.0 	10364.8468324
11 	176.0 	12222.8143364
12 	173.0 	12890.9021622
13 	163.0 	14968.3255355
14 	157.0 	16260.4633131
15 	150.0 	17734.312449
16 	148.0 	18221.7400708
17 	138.0 	20328.8394196
18 	121.0 	24014.9906635
('top_ft_inx_arr: ', array([ 3,  4,  5,  6,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29, 33,
       34, 35, 37, 39, 41, 46, 47, 48]))
ft_imp_total =  0.9
ft cv scores:  [ 0.15534541  0.23713508  0.15918013  0.21468407  0.30484299  0.03395544
  0.01717868  0.1763285   0.13898891  0.20472663]
top_ft_inx_arr:  [ 3  4  5  6  7  8 11 13 15 16 18 19 21 24 26 29 33 34 35 37 39 41 46 47 48]
(25 out of 50) Features to keep are determined: 3, 4, 5, 6, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29, 33, 34, 35, 37, 39, 41, 46, 47, 48
Oracle performance before algorithm subset selection: num_inst_solved =  230  - par10 =  413.407921787
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.35252978  0.35252978  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 85.  85.  95.  95.] ,  [ 0.          0.35320434  0.35320434  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 115.  115.  125.  125.] ,  [ 0.          0.12696519  0.12696519  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 135.  135.  145.  145.] ,  [ 0.          0.23720194  0.23720194  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 120.  120.  140.  140.] ,  [ 0.12696519  0.36169889  0.36169889  0.23720194] ,  r
plt.plot(xs, ys,  color) =  [ 105.  105.  130.  130.] ,  [ 0.          0.40736355  0.40736355  0.36169889] ,  r
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.43565632  0.43565632  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.43927622  0.43927622  0.43565632] ,  r
plt.plot(xs, ys,  color) =  [ 117.5  117.5  162.5  162.5] ,  [ 0.40736355  0.4657901   0.4657901   0.43927622] ,  r
plt.plot(xs, ys,  color) =  [  90.   90.  140.  140.] ,  [ 0.35320434  0.46722984  0.46722984  0.4657901 ] ,  r
plt.plot(xs, ys,  color) =  [  75.   75.  115.  115.] ,  [ 0.          0.55821476  0.55821476  0.46722984] ,  b
plt.plot(xs, ys,  color) =  [ 65.  65.  95.  95.] ,  [ 0.          0.56839142  0.56839142  0.55821476] ,  b
plt.plot(xs, ys,  color) =  [ 55.  55.  80.  80.] ,  [ 0.          0.59414403  0.59414403  0.56839142] ,  b
plt.plot(xs, ys,  color) =  [ 45.   45.   67.5  67.5] ,  [ 0.          0.64578331  0.64578331  0.59414403] ,  b
plt.plot(xs, ys,  color) =  [ 35.    35.    56.25  56.25] ,  [ 0.          0.66309703  0.66309703  0.64578331] ,  b
plt.plot(xs, ys,  color) =  [ 25.     25.     45.625  45.625] ,  [ 0.          0.68046366  0.68046366  0.66309703] ,  b
plt.plot(xs, ys,  color) =  [ 10.      10.      35.3125  35.3125] ,  [ 0.35252978  0.69151766  0.69151766  0.68046366] ,  b
leaves:  [ 4  7 17 12  1  0 13  6  5 10  8  3 11  9 15 14  2 16]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  3165.51984429
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3175.81394403
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3197.33518199
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3218.41644799
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3225.24961201
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3231.50426054
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
Oracle performance after algorithm subset selection: num_inst_solved =  230  - par10 =  456.990495748
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 15550.57 (30 instances)
% >>> 3-th iteration<<<
('sr: ', array([ 850.81906588,  187.59683837,  132.10003858,  123.7860027 ,
         91.86164649,   82.73308551,   73.93294035]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	228.0 	421.136905982
2 	223.0 	1599.01463769
3 	217.0 	2967.68855901
4 	209.0 	4693.08238723
5 	203.0 	5960.74036618
6 	200.0 	6645.07054093
7 	198.0 	7156.05645026
8 	191.0 	8655.44509629
9 	189.0 	9145.00524374
10 	182.0 	10657.8510451
11 	173.0 	12527.1113182
12 	171.0 	13003.2922656
13 	161.0 	15098.7845139
14 	154.0 	16610.0272564
15 	149.0 	17698.0169206
16 	146.0 	18398.507618
17 	135.0 	20718.6493871
18 	118.0 	24418.9405098
('top_ft_inx_arr: ', array([ 0,  1,  3,  4,  5,  6,  7,  8, 13, 14, 15, 16, 19, 21, 24, 26, 29,
       31, 34, 35, 36, 37, 39, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [ 0.1237332   0.21531838  0.21729278  0.22581547  0.11756566  0.17604686
  0.14916845  0.28446977  0.25070994  0.12890491]
top_ft_inx_arr:  [ 0  1  3  4  5  6  7  8 13 14 15 16 19 21 24 26 29 31 34 35 36 37 39 46 47]
(25 out of 50) Features to keep are determined: 0, 1, 3, 4, 5, 6, 7, 8, 13, 14, 15, 16, 19, 21, 24, 26, 29, 31, 34, 35, 36, 37, 39, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  228  - par10 =  421.136905982
plt.plot(xs, ys,  color) =  [ 15.  15.  25.  25.] ,  [ 0.          0.30041405  0.30041405  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 85.  85.  95.  95.] ,  [ 0.          0.27812846  0.27812846  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 115.  115.  125.  125.] ,  [ 0.         0.1314748  0.1314748  0.       ] ,  r
plt.plot(xs, ys,  color) =  [ 135.  135.  145.  145.] ,  [ 0.          0.31414199  0.31414199  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 120.  120.  140.  140.] ,  [ 0.1314748   0.3726199   0.3726199   0.31414199] ,  r
plt.plot(xs, ys,  color) =  [ 105.  105.  130.  130.] ,  [ 0.          0.42221917  0.42221917  0.3726199 ] ,  r
plt.plot(xs, ys,  color) =  [  90.    90.   117.5  117.5] ,  [ 0.27812846  0.46804525  0.46804525  0.42221917] ,  r
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.40497804  0.40497804  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.48716089  0.48716089  0.40497804] ,  c
plt.plot(xs, ys,  color) =  [ 103.75  103.75  162.5   162.5 ] ,  [ 0.46804525  0.55190143  0.55190143  0.48716089] ,  b
plt.plot(xs, ys,  color) =  [  75.      75.     133.125  133.125] ,  [ 0.          0.5559503   0.5559503   0.55190143] ,  b
plt.plot(xs, ys,  color) =  [  65.       65.      104.0625  104.0625] ,  [ 0.          0.59831742  0.59831742  0.5559503 ] ,  b
plt.plot(xs, ys,  color) =  [ 55.       55.       84.53125  84.53125] ,  [ 0.          0.63250132  0.63250132  0.59831742] ,  b
plt.plot(xs, ys,  color) =  [ 45.        45.        69.765625  69.765625] ,  [ 0.          0.63561498  0.63561498  0.63250132] ,  b
plt.plot(xs, ys,  color) =  [ 35.         35.         57.3828125  57.3828125] ,  [ 0.          0.65049016  0.65049016  0.63561498] ,  b
plt.plot(xs, ys,  color) =  [ 20.          20.          46.19140625  46.19140625] ,  [ 0.30041405  0.69203807  0.69203807  0.65049016] ,  b
plt.plot(xs, ys,  color) =  [  5.           5.          33.09570312  33.09570312] ,  [ 0.          0.78065338  0.78065338  0.69203807] ,  b
leaves:  [12  4  7  1 17 13  0  6  5 10  8  3 11  9 15 14  2 16]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  2981.44305318
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  3  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2986.56596548
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  2996.31642857
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3017.41778506
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3024.89039832
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3033.52792675
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  12
Oracle performance after algorithm subset selection: num_inst_solved =  228  - par10 =  455.70568736
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 17085.37 (30 instances)
% >>> 4-th iteration<<<
('sr: ', array([ 852.26751891,  186.5630564 ,  131.57015826,  124.80700411,
         91.91209407,   81.99798781,   73.6383728 ]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	226.0 	406.275182889
2 	222.0 	1415.03356972
3 	217.0 	2583.02012502
4 	211.0 	3921.86251539
5 	203.0 	5603.84161115
6 	199.0 	6493.33811069
7 	197.0 	7014.25367666
8 	190.0 	8519.84479614
9 	188.0 	9009.58313762
10 	182.0 	10338.9500057
11 	172.0 	12424.5766135
12 	169.0 	13098.1954157
13 	160.0 	15001.6900423
14 	155.0 	16105.4025625
15 	148.0 	17604.8282191
16 	146.0 	18096.0140723
17 	136.0 	20240.4889092
18 	119.0 	23986.0512499
('top_ft_inx_arr: ', array([ 3,  4,  5,  6,  7,  8, 11, 15, 16, 18, 19, 21, 24, 26, 29, 33, 34,
       35, 36, 37, 39, 41, 46, 47, 48]))
ft_imp_total =  0.9
ft cv scores:  [ 0.17515804  0.25154562  0.09715189  0.25254346  0.09292896  0.19124366
  0.13443757  0.2057442   0.18997249  0.19849323]
top_ft_inx_arr:  [ 3  4  5  6  7  8 11 15 16 18 19 21 24 26 29 33 34 35 36 37 39 41 46 47 48]
(25 out of 50) Features to keep are determined: 3, 4, 5, 6, 7, 8, 11, 15, 16, 18, 19, 21, 24, 26, 29, 33, 34, 35, 36, 37, 39, 41, 46, 47, 48
Oracle performance before algorithm subset selection: num_inst_solved =  226  - par10 =  406.275182889
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.47843338  0.47843338  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.          0.50542198  0.50542198  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 75.  75.  85.  85.] ,  [ 0.          0.33623017  0.33623017  0.        ] ,  c
plt.plot(xs, ys,  color) =  [  95.   95.  105.  105.] ,  [ 0.          0.12735118  0.12735118  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 115.  115.  125.  125.] ,  [ 0.         0.2906406  0.2906406  0.       ] ,  c
plt.plot(xs, ys,  color) =  [ 100.  100.  120.  120.] ,  [ 0.12735118  0.33796247  0.33796247  0.2906406 ] ,  c
plt.plot(xs, ys,  color) =  [  80.   80.  110.  110.] ,  [ 0.33623017  0.44345141  0.44345141  0.33796247] ,  c
plt.plot(xs, ys,  color) =  [ 65.  65.  95.  95.] ,  [ 0.          0.48347165  0.48347165  0.44345141] ,  c
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.        0.436139  0.436139  0.      ] ,  m
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.44477302  0.44477302  0.436139  ] ,  m
plt.plot(xs, ys,  color) =  [ 145.   145.   162.5  162.5] ,  [ 0.          0.49140216  0.49140216  0.44477302] ,  m
plt.plot(xs, ys,  color) =  [ 135.    135.    153.75  153.75] ,  [ 0.          0.52304242  0.52304242  0.49140216] ,  b
plt.plot(xs, ys,  color) =  [  80.      80.     144.375  144.375] ,  [ 0.48347165  0.5628372   0.5628372   0.52304242] ,  b
plt.plot(xs, ys,  color) =  [  55.       55.      112.1875  112.1875] ,  [ 0.          0.60942487  0.60942487  0.5628372 ] ,  b
plt.plot(xs, ys,  color) =  [ 45.       45.       83.59375  83.59375] ,  [ 0.          0.66364601  0.66364601  0.60942487] ,  b
plt.plot(xs, ys,  color) =  [ 30.        30.        64.296875  64.296875] ,  [ 0.50542198  0.6987688   0.6987688   0.66364601] ,  b
plt.plot(xs, ys,  color) =  [ 10.         10.         47.1484375  47.1484375] ,  [ 0.47843338  0.73467979  0.73467979  0.6987688 ] ,  b
leaves:  [ 1 12  4  7 17  0  8  5 10  3 11  9 15 13 14 16  2  6]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2586.78955672
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  2607.70128446
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  2617.05226438
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  2637.704305
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  2643.67333741
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  2652.35242047
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
Oracle performance after algorithm subset selection: num_inst_solved =  226  - par10 =  450.25786158
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 8878.60 (30 instances)
% >>> 5-th iteration<<<
('sr: ', array([ 850.54743738,  188.68551392,  129.29703694,  124.42529551,
         88.512154  ,   82.91047006,   75.42973175]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	228.0 	420.499715575
2 	223.0 	1626.16759235
3 	218.0 	2765.58604898
4 	211.0 	4300.76802511
5 	203.0 	5964.2483139
6 	199.0 	6845.12207395
7 	197.0 	7350.31326725
8 	190.0 	8835.75311087
9 	187.0 	9510.19548787
10 	182.0 	10626.7600599
11 	172.0 	12690.1741241
12 	170.0 	13145.1260048
13 	163.0 	14627.9598267
14 	157.0 	15930.4473421
15 	152.0 	17019.2951551
16 	149.0 	17715.3098381
17 	138.0 	20037.4180136
18 	122.0 	23545.6252597
('top_ft_inx_arr: ', array([ 1,  2,  3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26,
       29, 35, 36, 37, 39, 41, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [ 0.03081222  0.17165173  0.095521    0.20898736  0.10772781  0.17058872
 -0.05775435  0.2749827   0.18544541  0.17071326]
top_ft_inx_arr:  [ 1  2  3  4  5  7  8 11 13 15 16 18 19 21 24 25 26 29 35 36 37 39 41 46 47]
(25 out of 50) Features to keep are determined: 1, 2, 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 35, 36, 37, 39, 41, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  228  - par10 =  420.499715575
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.37211138  0.37211138  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 65.  65.  75.  75.] ,  [ 0.          0.38259216  0.38259216  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 55.  55.  70.  70.] ,  [ 0.          0.51519468  0.51519468  0.38259216] ,  b
plt.plot(xs, ys,  color) =  [  95.   95.  105.  105.] ,  [ 0.          0.29394546  0.29394546  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 125.  125.  135.  135.] ,  [ 0.          0.09498556  0.09498556  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 115.  115.  130.  130.] ,  [ 0.          0.34585383  0.34585383  0.09498556] ,  c
plt.plot(xs, ys,  color) =  [ 100.   100.   122.5  122.5] ,  [ 0.29394546  0.41307257  0.41307257  0.34585383] ,  c
plt.plot(xs, ys,  color) =  [ 145.  145.  155.  155.] ,  [ 0.          0.43443259  0.43443259  0.        ] ,  m
plt.plot(xs, ys,  color) =  [ 111.25  111.25  150.    150.  ] ,  [ 0.41307257  0.52199854  0.52199854  0.43443259] ,  b
plt.plot(xs, ys,  color) =  [  85.      85.     130.625  130.625] ,  [ 0.          0.54962349  0.54962349  0.52199854] ,  b
plt.plot(xs, ys,  color) =  [  62.5      62.5     107.8125  107.8125] ,  [ 0.51519468  0.55621764  0.55621764  0.54962349] ,  b
plt.plot(xs, ys,  color) =  [ 45.       45.       85.15625  85.15625] ,  [ 0.          0.56028739  0.56028739  0.55621764] ,  b
plt.plot(xs, ys,  color) =  [ 35.        35.        65.078125  65.078125] ,  [ 0.          0.5737811   0.5737811   0.56028739] ,  b
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.58988595  0.58988595  0.        ] ,  b
plt.plot(xs, ys,  color) =  [  50.0390625   50.0390625  170.         170.       ] ,  [ 0.5737811   0.63011875  0.63011875  0.58988595] ,  b
plt.plot(xs, ys,  color) =  [  25.           25.          110.01953125  110.01953125] ,  [ 0.          0.67021803  0.67021803  0.63011875] ,  b
plt.plot(xs, ys,  color) =  [ 10.          10.          67.50976562  67.50976562] ,  [ 0.37211138  0.69526965  0.69526965  0.67021803] ,  b
leaves:  [ 4  7 13 17  6 16  2 14  0  9 15  8  3 11  5 10  1 12]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2770.07449189
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  2779.01585479
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  2798.74473676
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  2803.1735911
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  2827.48439324
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  2833.3687125
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
Oracle performance after algorithm subset selection: num_inst_solved =  228  - par10 =  464.113083794
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 12158.25 (30 instances)
% >>> 6-th iteration<<<
('sr: ', array([ 851.51020245,  185.88328746,  131.87092063,  123.74146817,
         89.15419152,   81.88014174,   72.55813445]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	227.0 	410.672627137
2 	221.0 	1812.33451674
3 	216.0 	2966.4091482
4 	209.0 	4488.79077163
5 	203.0 	5757.48341014
6 	199.0 	6647.98920023
7 	198.0 	6961.60696447
8 	191.0 	8448.96158115
9 	189.0 	8941.43165867
10 	183.0 	10247.864954
11 	175.0 	11925.2938331
12 	172.0 	12600.9882006
13 	162.0 	14707.8359205
14 	157.0 	15821.888066
15 	152.0 	16894.2191672
16 	149.0 	17599.2581447
17 	140.0 	19510.2323002
18 	120.0 	23886.8833942
('top_ft_inx_arr: ', array([ 0,  3,  4,  5,  7,  8, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31,
       33, 34, 35, 37, 39, 41, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [-0.00735013  0.1361092   0.2077706   0.11731858  0.12421412  0.27536571
  0.14745003  0.29570623  0.14845099  0.03303409]
top_ft_inx_arr:  [ 0  3  4  5  7  8 13 15 16 18 19 21 24 25 26 29 31 33 34 35 37 39 41 46 47]
(25 out of 50) Features to keep are determined: 0, 3, 4, 5, 7, 8, 13, 15, 16, 18, 19, 21, 24, 25, 26, 29, 31, 33, 34, 35, 37, 39, 41, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  227  - par10 =  410.672627137
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.56099195  0.56099195  0.        ] ,  b
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.          0.39117287  0.39117287  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 125.  125.  135.  135.] ,  [ 0.         0.1038238  0.1038238  0.       ] ,  r
plt.plot(xs, ys,  color) =  [ 115.  115.  130.  130.] ,  [ 0.          0.32947292  0.32947292  0.1038238 ] ,  r
plt.plot(xs, ys,  color) =  [ 105.   105.   122.5  122.5] ,  [ 0.          0.35399731  0.35399731  0.32947292] ,  r
plt.plot(xs, ys,  color) =  [  95.     95.    113.75  113.75] ,  [ 0.          0.42431629  0.42431629  0.35399731] ,  r
plt.plot(xs, ys,  color) =  [  85.      85.     104.375  104.375] ,  [ 0.          0.42914715  0.42914715  0.42431629] ,  r
plt.plot(xs, ys,  color) =  [ 75.      75.      94.6875  94.6875] ,  [ 0.          0.44374777  0.44374777  0.42914715] ,  r
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.39392857  0.39392857  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.42703918  0.42703918  0.39392857] ,  c
plt.plot(xs, ys,  color) =  [ 145.   145.   162.5  162.5] ,  [ 0.          0.50092423  0.50092423  0.42703918] ,  c
plt.plot(xs, ys,  color) =  [  84.84375   84.84375  153.75     153.75   ] ,  [ 0.44374777  0.55127909  0.55127909  0.50092423] ,  b
plt.plot(xs, ys,  color) =  [  65.         65.        119.296875  119.296875] ,  [ 0.          0.62511359  0.62511359  0.55127909] ,  b
plt.plot(xs, ys,  color) =  [ 55.         55.         92.1484375  92.1484375] ,  [ 0.          0.63757975  0.63757975  0.62511359] ,  b
plt.plot(xs, ys,  color) =  [ 45.          45.          73.57421875  73.57421875] ,  [ 0.          0.66276084  0.66276084  0.63757975] ,  b
plt.plot(xs, ys,  color) =  [ 30.          30.          59.28710938  59.28710938] ,  [ 0.39117287  0.72025322  0.72025322  0.66276084] ,  b
plt.plot(xs, ys,  color) =  [ 10.          10.          44.64355469  44.64355469] ,  [ 0.56099195  0.72877029  0.72877029  0.72025322] ,  b
leaves:  [ 1 12  4  7 13 17  0  5  9 10 15  8  3 11 14 16  2  6]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  2985.97945269
alg_portfolio =  [ 0  1  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2990.10054077
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3002.3304827
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3013.1628358
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3020.85106463
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3029.38388486
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
Oracle performance after algorithm subset selection: num_inst_solved =  227  - par10 =  448.787770273
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 15685.81 (30 instances)
% >>> 7-th iteration<<<
('sr: ', array([ 855.55885297,  185.53124867,  130.34249177,  124.16268867,
         91.68015352,   84.15635315,   74.98760026]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	228.0 	431.058605254
2 	222.0 	1843.35420649
3 	216.0 	3214.57068131
4 	208.0 	4943.35728015
5 	200.0 	6611.88979199
6 	196.0 	7496.40763189
7 	194.0 	8004.71696318
8 	189.0 	9110.30716664
9 	186.0 	9794.52781719
10 	179.0 	11310.7361519
11 	171.0 	12980.0239317
12 	168.0 	13650.7369098
13 	158.0 	15748.5117369
14 	151.0 	17258.231776
15 	144.0 	18734.1150086
16 	142.0 	19223.910563
17 	133.0 	21130.2122019
18 	113.0 	25476.6575645
('top_ft_inx_arr: ', array([ 2,  3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29, 31,
       33, 35, 37, 39, 41, 44, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [ 0.06702993  0.0621644   0.17476094  0.06478059  0.10000933  0.12596737
  0.20646412  0.10191601  0.03133633  0.10836986]
top_ft_inx_arr:  [ 2  3  4  5  7  8 11 13 15 16 18 19 21 24 26 29 31 33 35 37 39 41 44 46 47]
(25 out of 50) Features to keep are determined: 2, 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29, 31, 33, 35, 37, 39, 41, 44, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  228  - par10 =  431.058605254
plt.plot(xs, ys,  color) =  [ 15.  15.  25.  25.] ,  [ 0.          0.31358332  0.31358332  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 55.  55.  65.  65.] ,  [ 0.          0.32322255  0.32322255  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 85.  85.  95.  95.] ,  [ 0.          0.11350524  0.11350524  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 75.  75.  90.  90.] ,  [ 0.          0.32445184  0.32445184  0.11350524] ,  r
plt.plot(xs, ys,  color) =  [ 60.   60.   82.5  82.5] ,  [ 0.32322255  0.37249341  0.37249341  0.32445184] ,  r
plt.plot(xs, ys,  color) =  [ 105.  105.  115.  115.] ,  [ 0.          0.39173428  0.39173428  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  71.25   71.25  110.    110.  ] ,  [ 0.37249341  0.47206204  0.47206204  0.39173428] ,  r
plt.plot(xs, ys,  color) =  [ 145.  145.  155.  155.] ,  [ 0.          0.40740783  0.40740783  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 135.  135.  150.  150.] ,  [ 0.          0.4465403   0.4465403   0.40740783] ,  c
plt.plot(xs, ys,  color) =  [ 125.   125.   142.5  142.5] ,  [ 0.          0.51120985  0.51120985  0.4465403 ] ,  b
plt.plot(xs, ys,  color) =  [  90.625   90.625  133.75   133.75 ] ,  [ 0.47206204  0.51994934  0.51994934  0.51120985] ,  b
plt.plot(xs, ys,  color) =  [  45.       45.      112.1875  112.1875] ,  [ 0.          0.59841419  0.59841419  0.51994934] ,  b
plt.plot(xs, ys,  color) =  [ 35.       35.       78.59375  78.59375] ,  [ 0.          0.61095926  0.61095926  0.59841419] ,  b
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.63978656  0.63978656  0.        ] ,  b
plt.plot(xs, ys,  color) =  [  56.796875   56.796875  170.        170.      ] ,  [ 0.61095926  0.65556363  0.65556363  0.63978656] ,  b
plt.plot(xs, ys,  color) =  [  20.          20.         113.3984375  113.3984375] ,  [ 0.31358332  0.71952092  0.71952092  0.65556363] ,  b
plt.plot(xs, ys,  color) =  [  5.           5.          66.69921875  66.69921875] ,  [ 0.          0.72360631  0.72360631  0.71952092] ,  b
leaves:  [13  4  7 17  0  9 15  8  3 11  5 10  6 14  2 16  1 12]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  3219.07372646
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3229.56266877
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3251.21968571
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3271.3229229
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3278.99171029
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3287.60489703
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
Oracle performance after algorithm subset selection: num_inst_solved =  228  - par10 =  474.530625684
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 10330.56 (30 instances)
% >>> 8-th iteration<<<
('sr: ', array([ 852.36572047,  189.81523505,  129.02440771,  122.71159786,
         89.54987038,   82.93460205,   74.56499245]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	227.0 	416.26121504
2 	222.0 	1613.88531632
3 	217.0 	2778.82215789
4 	210.0 	4312.72281038
5 	203.0 	5784.71143714
6 	199.0 	6676.84952715
7 	197.0 	7197.03818807
8 	190.0 	8707.3406211
9 	187.0 	9396.77154471
10 	181.0 	10721.2948475
11 	173.0 	12400.9639421
12 	170.0 	13079.3083071
13 	161.0 	14971.2089892
14 	154.0 	16497.868744
15 	147.0 	17993.4409804
16 	144.0 	18689.7963604
17 	134.0 	20812.547529
18 	114.0 	25181.2031458
('top_ft_inx_arr: ', array([ 2,  3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 24, 25, 26, 28, 29,
       34, 35, 37, 39, 41, 44, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [ 0.06364908  0.20118516  0.10864626  0.32434882  0.08022691  0.12798732
  0.10373583  0.22100325  0.09451878  0.24557289]
top_ft_inx_arr:  [ 2  3  4  5  7  8 11 13 15 16 18 19 24 25 26 28 29 34 35 37 39 41 44 46 47]
(25 out of 50) Features to keep are determined: 2, 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 24, 25, 26, 28, 29, 34, 35, 37, 39, 41, 44, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  227  - par10 =  416.26121504
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.39985158  0.39985158  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 75.  75.  85.  85.] ,  [ 0.          0.11466762  0.11466762  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  95.   95.  105.  105.] ,  [ 0.          0.31302923  0.31302923  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  80.   80.  100.  100.] ,  [ 0.11466762  0.34309165  0.34309165  0.31302923] ,  r
plt.plot(xs, ys,  color) =  [ 115.  115.  125.  125.] ,  [ 0.          0.38328561  0.38328561  0.        ] ,  r
plt.plot(xs, ys,  color) =  [  90.   90.  120.  120.] ,  [ 0.34309165  0.46227625  0.46227625  0.38328561] ,  r
plt.plot(xs, ys,  color) =  [  65.   65.  105.  105.] ,  [ 0.          0.51346522  0.51346522  0.46227625] ,  b
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.44752402  0.44752402  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.45062409  0.45062409  0.44752402] ,  c
plt.plot(xs, ys,  color) =  [ 145.   145.   162.5  162.5] ,  [ 0.          0.47350384  0.47350384  0.45062409] ,  c
plt.plot(xs, ys,  color) =  [ 135.    135.    153.75  153.75] ,  [ 0.          0.58633678  0.58633678  0.47350384] ,  b
plt.plot(xs, ys,  color) =  [  85.      85.     144.375  144.375] ,  [ 0.51346522  0.61261863  0.61261863  0.58633678] ,  b
plt.plot(xs, ys,  color) =  [  55.       55.      114.6875  114.6875] ,  [ 0.          0.64143109  0.64143109  0.61261863] ,  b
plt.plot(xs, ys,  color) =  [ 45.       45.       84.84375  84.84375] ,  [ 0.          0.6581389   0.6581389   0.64143109] ,  b
plt.plot(xs, ys,  color) =  [ 35.        35.        64.921875  64.921875] ,  [ 0.          0.66123316  0.66123316  0.6581389 ] ,  b
plt.plot(xs, ys,  color) =  [ 25.         25.         49.9609375  49.9609375] ,  [ 0.          0.6703818   0.6703818   0.66123316] ,  b
plt.plot(xs, ys,  color) =  [ 10.          10.          37.48046875  37.48046875] ,  [ 0.39985158  0.68301632  0.68301632  0.6703818 ] ,  b
leaves:  [ 4  7 12 17  0  1  8  3 11  9 15  5 10 13  6 14  2 16]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2783.18670764
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  2792.95298662
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  2  4  5  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  2811.66406637
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  2  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  2830.36728275
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  2838.11942253
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  2846.79713333
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  12
Oracle performance after algorithm subset selection: num_inst_solved =  227  - par10 =  455.287139273
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glueminisat_2.2.5
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 8932.66 (30 instances)
% >>> 9-th iteration<<<
('sr: ', array([ 852.57558432,  187.61940442,  131.22463882,  122.77623418,
         86.67310396,   83.21613592,   75.04783018]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	225.0 	403.976556102
2 	220.0 	1590.88429754
3 	216.0 	2551.2895066
4 	210.0 	3885.69737348
5 	203.0 	5365.08123502
6 	200.0 	6061.8453564
7 	198.0 	6582.01545952
8 	192.0 	7892.14889601
9 	189.0 	8594.03883059
10 	182.0 	10130.2090547
11 	173.0 	12021.0765043
12 	170.0 	12695.3005031
13 	161.0 	14616.1899129
14 	154.0 	16152.4997277
15 	148.0 	17457.8336066
16 	145.0 	18151.4863337
17 	137.0 	19891.0856167
18 	118.0 	24093.5054836
('top_ft_inx_arr: ', array([ 1,  3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 27,
       29, 33, 34, 35, 37, 39, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [-0.01867874  0.2274573   0.12340655  0.19367635  0.20097542  0.18291543
  0.14104429  0.30530122  0.16444828  0.12980376]
top_ft_inx_arr:  [ 1  3  4  5  7  8 11 13 15 16 18 19 21 24 25 26 27 29 33 34 35 37 39 46 47]
(25 out of 50) Features to keep are determined: 1, 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 25, 26, 27, 29, 33, 34, 35, 37, 39, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  225  - par10 =  403.976556102
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.         0.5674746  0.5674746  0.       ] ,  b
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.          0.36495583  0.36495583  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 85.  85.  95.  95.] ,  [ 0.          0.28184649  0.28184649  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 115.  115.  125.  125.] ,  [ 0.          0.12196324  0.12196324  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 135.  135.  145.  145.] ,  [ 0.          0.36855793  0.36855793  0.        ] ,  r
plt.plot(xs, ys,  color) =  [ 120.  120.  140.  140.] ,  [ 0.12196324  0.36940256  0.36940256  0.36855793] ,  r
plt.plot(xs, ys,  color) =  [ 105.  105.  130.  130.] ,  [ 0.          0.3878303   0.3878303   0.36940256] ,  r
plt.plot(xs, ys,  color) =  [  90.    90.   117.5  117.5] ,  [ 0.28184649  0.41790322  0.41790322  0.3878303 ] ,  r
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.         0.4573227  0.4573227  0.       ] ,  r
plt.plot(xs, ys,  color) =  [ 155.  155.  170.  170.] ,  [ 0.          0.48900466  0.48900466  0.4573227 ] ,  r
plt.plot(xs, ys,  color) =  [ 103.75  103.75  162.5   162.5 ] ,  [ 0.41790322  0.51135464  0.51135464  0.48900466] ,  r
plt.plot(xs, ys,  color) =  [  75.      75.     133.125  133.125] ,  [ 0.          0.51344144  0.51344144  0.51135464] ,  r
plt.plot(xs, ys,  color) =  [  65.       65.      104.0625  104.0625] ,  [ 0.          0.60131585  0.60131585  0.51344144] ,  b
plt.plot(xs, ys,  color) =  [ 55.       55.       84.53125  84.53125] ,  [ 0.          0.65875303  0.65875303  0.60131585] ,  b
plt.plot(xs, ys,  color) =  [ 45.        45.        69.765625  69.765625] ,  [ 0.          0.66732263  0.66732263  0.65875303] ,  b
plt.plot(xs, ys,  color) =  [ 30.         30.         57.3828125  57.3828125] ,  [ 0.36495583  0.68518129  0.68518129  0.66732263] ,  b
plt.plot(xs, ys,  color) =  [ 10.          10.          43.69140625  43.69140625] ,  [ 0.5674746   0.7452499   0.7452499   0.68518129] ,  b
leaves:  [ 1 12  4  7 17 13  0  6  9 15  8  3 11  5 10 16  2 14]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  2571.08593012
alg_portfolio =  [ 0  1  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  2575.7723536
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  2594.22400413
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  2606.02532468
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  2612.15872354
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  2619.56201782
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
Oracle performance after algorithm subset selection: num_inst_solved =  225  - par10 =  449.240672338
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 9067.23 (30 instances)
% >>> 10-th iteration<<<
('sr: ', array([ 847.64782841,  191.47345724,  130.04051009,  125.1861245 ,
         90.03246621,   83.33196438,   75.32466893]), ' - svd_k: ', 7)

opt_portfolio:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
opt_portfolio v2:  set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
evaluate_dataset_hardness: k	 num_solved	 par10
1 	231.0 	435.979244281
2 	225.0 	1823.85872858
3 	219.0 	3175.53547204
4 	211.0 	4871.83966961
5 	204.0 	6322.1585329
6 	200.0 	7200.2329588
7 	198.0 	7683.24831416
8 	191.0 	9164.10708542
9 	188.0 	9846.39814965
10 	182.0 	11136.2210297
11 	173.0 	12972.6558096
12 	171.0 	13436.3952125
13 	163.0 	15118.9215198
14 	157.0 	16422.7595647
15 	150.0 	17895.1497641
16 	147.0 	18586.8844004
17 	136.0 	20881.4301656
18 	119.0 	24539.6001874
('top_ft_inx_arr: ', array([ 1,  2,  3,  4,  5,  7,  8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29,
       33, 35, 36, 37, 39, 41, 46, 47]))
ft_imp_total =  0.9
ft cv scores:  [ 0.00288604  0.13603787  0.24005174  0.26229319  0.13820332  0.12338181
  0.13471689  0.29063614  0.23744878  0.15402683]
top_ft_inx_arr:  [ 1  2  3  4  5  7  8 11 13 15 16 18 19 21 24 26 29 33 35 36 37 39 41 46 47]
(25 out of 50) Features to keep are determined: 1, 2, 3, 4, 5, 7, 8, 11, 13, 15, 16, 18, 19, 21, 24, 26, 29, 33, 35, 36, 37, 39, 41, 46, 47
Oracle performance before algorithm subset selection: num_inst_solved =  231  - par10 =  435.979244281
plt.plot(xs, ys,  color) =  [  5.   5.  15.  15.] ,  [ 0.          0.47506429  0.47506429  0.        ] ,  g
plt.plot(xs, ys,  color) =  [ 25.  25.  35.  35.] ,  [ 0.         0.3707646  0.3707646  0.       ] ,  r
plt.plot(xs, ys,  color) =  [ 85.  85.  95.  95.] ,  [ 0.          0.46130747  0.46130747  0.        ] ,  c
plt.plot(xs, ys,  color) =  [ 75.  75.  90.  90.] ,  [ 0.          0.47394104  0.47394104  0.46130747] ,  c
plt.plot(xs, ys,  color) =  [ 65.   65.   82.5  82.5] ,  [ 0.          0.57062324  0.57062324  0.47394104] ,  b
plt.plot(xs, ys,  color) =  [ 125.  125.  135.  135.] ,  [ 0.          0.34273382  0.34273382  0.        ] ,  m
plt.plot(xs, ys,  color) =  [ 145.  145.  155.  155.] ,  [ 0.          0.09454376  0.09454376  0.        ] ,  m
plt.plot(xs, ys,  color) =  [ 165.  165.  175.  175.] ,  [ 0.          0.27364986  0.27364986  0.        ] ,  m
plt.plot(xs, ys,  color) =  [ 150.  150.  170.  170.] ,  [ 0.09454376  0.34813656  0.34813656  0.27364986] ,  m
plt.plot(xs, ys,  color) =  [ 130.  130.  160.  160.] ,  [ 0.34273382  0.4579943   0.4579943   0.34813656] ,  m
plt.plot(xs, ys,  color) =  [ 115.  115.  145.  145.] ,  [ 0.          0.47368228  0.47368228  0.4579943 ] ,  m
plt.plot(xs, ys,  color) =  [ 105.  105.  130.  130.] ,  [ 0.          0.57440758  0.57440758  0.47368228] ,  b
plt.plot(xs, ys,  color) =  [  73.75   73.75  117.5   117.5 ] ,  [ 0.57062324  0.58020543  0.58020543  0.57440758] ,  b
plt.plot(xs, ys,  color) =  [ 55.     55.     95.625  95.625] ,  [ 0.          0.60055034  0.60055034  0.58020543] ,  b
plt.plot(xs, ys,  color) =  [ 45.      45.      75.3125  75.3125] ,  [ 0.          0.62018404  0.62018404  0.60055034] ,  b
plt.plot(xs, ys,  color) =  [ 30.       30.       60.15625  60.15625] ,  [ 0.3707646   0.70028763  0.70028763  0.62018404] ,  b
plt.plot(xs, ys,  color) =  [ 10.        10.        45.078125  45.078125] ,  [ 0.47506429  0.7181146   0.7181146   0.70028763] ,  b
leaves:  [ 1 12  4  7 13 17  6 14  2 16  0  8  5 10  3 11  9 15]
alg_portfolio =  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]  -- alg_inx =  1
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  12
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  4
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  7
alg_portfolio =  [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  2
2  is removed from pair - new par10:  3183.51607287
alg_portfolio =  [ 0  1  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]  -- alg_inx =  14
14  is removed from pair - new par10:  3186.07173005
alg_portfolio =  [ 0  1  3  4  5  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  16
alg_portfolio =  [ 0  1  3  4  5  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  3
3  is removed from pair - new par10:  3194.9705482
alg_portfolio =  [ 0  1  4  5  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  5
5  is removed from pair - new par10:  3213.96246814
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  8
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  9
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  10
alg_portfolio =  [ 0  1  4  6  7  8  9 10 11 12 13 15 16 17]  -- alg_inx =  11
11  is removed from pair - new par10:  3227.48535597
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  15
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  6
alg_portfolio =  [ 0  1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  0
0  is removed from pair - new par10:  3235.61476443
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  17
alg_portfolio =  [ 1  4  6  7  8  9 10 12 13 15 16 17]  -- alg_inx =  13
Oracle performance after algorithm subset selection: num_inst_solved =  231  - par10 =  479.726186065
(12 out of 18) Algorithms/solvers to keep are determined: 1, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17
('inst_per_cls : ', array([   0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,
          9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,
         18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   26.,
         27.,   28.,   29.,   30.,   31.,   32.,   33.,   34.,   35.,
         36.,   37.,   38.,   39.,   40.,   41.,   42.,   43.,   44.,
         45.,   46.,   47.,   48.,   49.,   50.,   51.,   52.,   53.,
         54.,   55.,   56.,   57.,   58.,   59.,   60.,   61.,   62.,
         63.,   64.,   65.,   66.,   67.,   68.,   69.,   70.,   71.,
         72.,   73.,   74.,   75.,   76.,   77.,   78.,   79.,   80.,
         81.,   82.,   83.,   84.,   85.,   86.,   87.,   88.,   89.,
         90.,   91.,   92.,   93.,   94.,   95.,   96.,   97.,   98.,
         99.,  100.,  101.,  102.,  103.,  104.,  105.,  106.,  107.,
        108.,  109.,  110.,  111.,  112.,  113.,  114.,  115.,  116.,
        117.,  118.,  119.,  120.,  121.,  122.,  123.,  124.,  125.,
        126.,  127.,  128.,  129.,  130.,  131.,  132.,  133.,  134.,
        135.,  136.,  137.,  138.,  139.,  140.,  141.,  142.,  143.,
        144.,  145.,  146.,  147.,  148.,  149.,  150.,  151.,  152.,
        153.,  154.,  155.,  156.,  157.,  158.,  159.,  160.,  161.,
        162.,  163.,  164.,  165.,  166.,  167.,  168.,  169.,  170.,
        171.,  172.,  173.,  174.,  175.,  176.,  177.,  178.,  179.,
        180.,  181.,  182.,  183.,  184.,  185.,  186.,  187.,  188.,
        189.,  190.,  191.,  192.,  193.,  194.,  195.,  196.,  197.,
        198.,  199.,  200.,  201.,  202.,  203.,  204.,  205.,  206.,
        207.,  208.,  209.,  210.,  211.,  212.,  213.,  214.,  215.,
        216.,  217.,  218.,  219.,  220.,  221.,  222.,  223.,  224.,
        225.,  226.,  227.,  228.,  229.,  230.,  231.,  232.,  233.,
        234.,  235.,  236.,  237.,  238.,  239.,  240.,  241.,  242.,
        243.,  244.,  245.,  246.,  247.,  248.,  249.,  250.,  251.,
        252.,  253.,  254.,  255.,  256.,  257.,  258.,  259.,  260.,
        261.,  262.,  263.,  264.,  265.,  266.,  267.,  268.,  269.]))
(270 out of 270) Instances to keep are determined: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0
% Backup Solver: glucose_2
% Input Instances for Training: 270 (-unsolvable)
% Used Instances for Training: 270 (-unsolvable)
% Train with RANDOMFOREST-CLASSVOTER
% PAR10 on current test set: 13854.14 (30 instances)
% 
%  >>> Instances: 300 <<<
%  >>> Oracle Evaluation (w/o unsolved) <<<
% 
% Unsolved (not by any algorithm and not by feature computation): 47
% PAR1 time: 1137.674485 (420.167373)
% Par10 time: 8187.517818 (419.981603)
% #TOs: 47 (0)
% 
%  >>> Cross Fold Evaluation <<<
% 
% Presolved: 10
% >>>With Unsolvable Instances
% Timeouts per #Thread: {1: 69, 2: 59, 3: 56, 4: 53, 5: 53, 6: 51, 7: 49, 8: 49, 9: 48, 10: 48, 11: 47, 12: 47, 13: 47, 14: 0, 15: 0, 16: 0, 17: 0, 18: 0}
% Solved (perc) per #Thread: {1: 0.77, 2: 0.8033333333333333, 3: 0.8133333333333334, 4: 0.8233333333333334, 5: 0.8233333333333334, 6: 0.83, 7: 0.8366666666666667, 8: 0.8366666666666667, 9: 0.84, 10: 0.84, 11: 0.8433333333333333, 12: 0.8433333333333333, 13: 0.8433333333333333, 14: 1.0, 15: 1.0, 16: 1.0, 17: 1.0, 18: 1.0}
% AVG per #Thread: {1: 1692.2985933200052, 2: 1481.1729833666686, 3: 1399.3815105400001, 4: 1349.8800326566661, 5: 1342.7486656833362, 6: 1325.2785493933332, 7: 1297.0961567466675, 8: 1293.4047065233362, 9: 1282.119573873331, 10: 1272.9019277499988, 11: 1258.8343104333321, 12: 1258.4256728666633, 13: 1249.335426919999, 14: 0.06073333333333333, 15: 0.06073333333333333, 16: 0.06073333333333333, 17: 0.06073333333333333, 18: 0.06073333333333333}
% PAR10 per #Thread: {1: 12042.298593320005, 2: 10331.172983366669, 3: 9799.38151054, 4: 9299.880032656667, 5: 9292.748665683337, 6: 8975.278549393333, 7: 8647.096156746667, 8: 8643.404706523335, 9: 8482.119573873331, 10: 8472.90192775, 11: 8308.834310433333, 12: 8308.425672866664, 13: 8299.335426919999, 14: 0.06073333333333333, 15: 0.06073333333333333, 16: 0.06073333333333333, 17: 0.06073333333333333, 18: 0.06073333333333333}
% >>>Without Unsolved Instances (depends on pre-solved in feature groups)
% Timeouts: {1: 22, 2: 12, 3: 9, 4: 6, 5: 6, 6: 4, 7: 2, 8: 2, 9: 1, 10: 1, 11: 0, 12: 0, 13: 0, 14: -47, 15: -47, 16: -47, 17: -47, 18: -47}
% Solved (perc): {1: 0.9130434782608695, 2: 0.9525691699604744, 3: 0.9644268774703557, 4: 0.9762845849802372, 5: 0.9762845849802372, 6: 0.9841897233201581, 7: 0.9920948616600791, 8: 0.9920948616600791, 9: 0.9960474308300395, 10: 0.9960474308300395, 11: 0.9999999999999999, 12: 0.9999999999999999, 13: 0.9999999999999999, 14: 1.1857707509881423, 15: 1.1857707509881423, 16: 1.1857707509881423, 17: 1.1857707509881423, 18: 1.1857707509881423}
% PAR1: {1: 1077.824418956528, 2: 827.4778458893303, 3: 730.4919097312255, 4: 671.7945051264817, 5: 663.3383387549442, 6: 642.6227858418971, 7: 609.2049289486176, 8: 604.8277152450627, 9: 591.4461350276654, 10: 580.5161198616587, 11: 563.8351507114611, 12: 563.3506002371502, 13: 552.571652474307, 14: -928.7817391304347, 15: -928.7817391304347, 16: -928.7817391304347, 17: -928.7817391304347, 18: -928.7817391304347}
% PAR10: {1: 4990.8678972173975, 2: 2961.865197667986, 3: 2331.2824235652174, 4: 1738.9881810158115, 5: 1730.532014644274, 6: 1354.0852364347825, 7: 964.9361542450603, 8: 960.5589405415035, 9: 769.3117476758867, 10: 758.3817325098801, 11: 563.8351507114611, 12: 563.350600237152, 13: 552.571652474307, 14: -9288.465533596836, 15: -9288.465533596836, 16: -9288.465533596836, 17: -9288.465533596836, 18: -9288.465533596836}
% 
% Time used by each solver: {'minisathackLR_GL_SHR_2011-03-02': 10703.686000000002, 'minisathackcontrasat_2011-03-02': 79141.47050699999, 'MPhaseSAT64_2011-05-14_fixed_': 33069.442, 'CryptoMiniSat_Strange-Night2-st_fixed_': 54054.523042999994, 'EBGlucose_1.0': 16055.809566, 'minisathackcir_minisat_2011-05-13_simp_': 16342.7729, 'QuteRSat_2011-05-12_fixed_': 52315.618834, 'SAT09referencesolverprecosat_236': 29124.808899999996, 'Lingeling_587f_fixed_': 27609.709400000003, 'RestartSAT_B95': 23690.259866000004, 'minisathackEBMiniSAT_2011-03-02': 27147.597895999996, 'glucose_2': 74765.76099599998, 'glueminisat_2.2.5': 34387.648087999994}
% Optimal Time used by each solver: {'minisathackLR_GL_SHR_2011-03-02': 241445.91419599997, 'rcl_2011-04-01': 999.5696999999999, 'minisathackcontrasat_2011-03-02': 748.676488, 'SAT09referencesolverglucose_1.0': 1761.96, 'minisathackminisat_psm_2011-04-01': 1175.1730499999999, 'MPhaseSAT64_2011-05-14_fixed_': 18139.24949, 'EBGlucose_1.0': 3012.9838, 'minisathackMiniSAT_2.2.0-agile-26': 1611.924971, 'CryptoMiniSat_Strange-Night2-st_fixed_': 7449.210459999999, 'minisathackcir_minisat_2011-05-13_simp_': 794.152497, 'QuteRSat_2011-05-12_fixed_': 20680.214415, 'SAT09referencesolverprecosat_236': 4432.881372, 'Lingeling_587f_fixed_': 10308.949500000002, 'RestartSAT_B95': 9362.944313999998, 'minisathackreferenceminisat_2.2.0': 3026.339996, 'minisathackEBMiniSAT_2011-03-02': 181.82723800000002, 'glucose_2': 9830.662042, 'glueminisat_2.2.5': 6339.7119330000005}
Total time passed:  31.882  seconds
